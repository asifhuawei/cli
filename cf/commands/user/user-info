package user

import (
	//"errors"
	"fmt"
	"github.com/cloudfoundry/cli/cf"
	"github.com/cloudfoundry/cli/cf/api"
	"github.com/cloudfoundry/cli/cf/command_metadata"
	"github.com/cloudfoundry/cli/cf/configuration/core_config"
	. "github.com/cloudfoundry/cli/cf/i18n"
	"github.com/cloudfoundry/cli/cf/models"
	"github.com/cloudfoundry/cli/cf/requirements"
	"github.com/cloudfoundry/cli/cf/terminal"
	"github.com/codegangsta/cli"
	"strings"
)

type CFUsers struct {
	ui       terminal.UI
	config   core_config.Reader
	userRepo api.UserRepository
}

func ShowUserInfo(ui terminal.UI, config core_config.Reader, userRepo api.UserRepository) (cmd *CFUsers) {
	cmd = new(CFUsers)
	cmd.ui = ui
	cmd.config = config
	cmd.userRepo = userRepo
	return
}

func (cmd *CFUsers) Metadata() command_metadata.CommandMetadata {
	return command_metadata.CommandMetadata{
		Name:        "user-info",
		Description: T("Show user-info with roles"),
		Usage:       T("CF_NAME user-info"),
		Flags:       []cli.Flag{},
	}
}

func (cmd *CFUsers) GetRequirements(requirementsFactory requirements.Factory, c *cli.Context) (reqs []requirements.Requirement, err error) {

	if cmd.config.SpaceFields().Name == "" {
		if cmd.config.OrganizationFields().Name == "" {
			message := fmt.Sprintf(T("No org and space targeted, use '{{.Command}}' to target an org and space", map[string]interface{}{"Command": terminal.CommandColor(cf.Name() + " target -o ORG -s SPACE")}))
			cmd.ui.Failed(message)
			return
		} else {
			message := fmt.Sprintf(T("No space targeted, use '{{.Command}}' to target a space", map[string]interface{}{"Command": terminal.CommandColor("cf target -s")}))
			cmd.ui.Failed(message)
			return
		}
	}
	reqs = append(reqs, requirementsFactory.NewLoginRequirement())

	return
}

func (cmd *CFUsers) Run(c *cli.Context) {
	cmd.ui.Say(T("Getting user information..."))

	table := terminal.NewTable(cmd.ui, []string{T("User"), T("Org"), T("Space"), T("Role")})

	//Fetching the Roles at Organization level

	var orgRoleToDisplayName = map[string]string{
		models.ORG_USER:        T("USERS"),
		models.ORG_MANAGER:     T("ORG MANAGER"),
		models.BILLING_MANAGER: T("BILLING MANAGER"),
		models.ORG_AUDITOR:     T("ORG AUDITOR"),
	}
	retrivedRoles := []string{} //Variable to store all the roles
	var users []models.UserFields
	var apiErr error
	var roles = []string{models.ORG_MANAGER, models.BILLING_MANAGER, models.ORG_AUDITOR}
	for _, role := range roles {
		displayName := orgRoleToDisplayName[role]

		if cmd.config.IsMinApiVersion("2.21.0") {
			users, apiErr = cmd.userRepo.ListUsersInOrgForRoleWithNoUAA(cmd.config.OrganizationFields().Guid, role)
		} else {
			users, apiErr = cmd.userRepo.ListUsersInOrgForRole(cmd.config.OrganizationFields().Guid, role)
		}

		for _, user := range users {
			if cmd.config.Username() == user.Username {
				retrivedRoles = append(retrivedRoles, displayName)
			}
		}

		if apiErr != nil {
			cmd.ui.Failed(T("Failed fetching org-users for role {{.OrgRoleToDisplayName}}.\n{{.Error}}",
				map[string]interface{}{
					"Error":                apiErr.Error(),
					"OrgRoleToDisplayName": displayName,
				}))
			return
		}
	}

	//Fetching roles at Space Level

	var spaceRoles = []string{models.SPACE_MANAGER, models.SPACE_DEVELOPER, models.SPACE_AUDITOR}
	var spaceRoleToDisplayName = map[string]string{
		models.SPACE_MANAGER:   T("SPACE MANAGER"),
		models.SPACE_DEVELOPER: T("SPACE DEVELOPER"),
		models.SPACE_AUDITOR:   T("SPACE AUDITOR"),
	}

	var usersSpace []models.UserFields
	for _, role := range spaceRoles {
		displayName := spaceRoleToDisplayName[role]

		if cmd.config.IsMinApiVersion("2.21.0") {
			usersSpace, apiErr = cmd.userRepo.ListUsersInSpaceForRoleWithNoUAA(cmd.config.SpaceFields().Guid, role)
		} else {
			usersSpace, apiErr = cmd.userRepo.ListUsersInSpaceForRole(cmd.config.SpaceFields().Guid, role)
		}

		for _, user := range usersSpace {
			if cmd.config.Username() == user.Username {
				retrivedRoles = append(retrivedRoles, displayName)
			}
		}

		if apiErr != nil {
			cmd.ui.Failed(T("Failed fetching space-users for role {{.SpaceRoleToDisplayName}}.\n{{.Error}}",
				map[string]interface{}{
					"Error":                  apiErr.Error(),
					"SpaceRoleToDisplayName": displayName,
				}))
			return
		}
	}
	table.Add(cmd.config.Username(), cmd.config.OrganizationFields().Name, cmd.config.SpaceFields().Name, strings.Join(retrivedRoles, ", "))
	table.Print()
}
